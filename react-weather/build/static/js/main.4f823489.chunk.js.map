{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","cloudtotal","feelslike","humidity","seaLevelPressure","temperature","winddir_compass","windSpeed","description","error","API_KEY","APP_ID","App","state","undefined","_callee","e","latitude","longtitude","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","cloudtotal_pct","feelslike_c","humid_pct","slp_mb","temp_c","windspd_ms","wx_desc","stop","this","components_Titles","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f823489.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = () => (\n        <div>\n            <h1 className=\"title-container__title\">Weather Finder</h1>\n            <h3 className=\"title-container__subtitle\">Find out weather, conditions and more...</h3>\n\n        </div>);\n\nexport default Titles;\n","import React from 'react';\n\n// class Form extends React.Component {\n//     render() {\n//         return (\n//         <div>\n//             <h1>Form</h1>\n//         <form onSubmit={this.props.getWeather}>\n//             <input type=\"text\" name=\"latitude\" placeholder=\"(city)latitude\"></input>\n//             <input type=\"text\" name=\"longtitude\" placeholder=\"(country)longtitude\"></input>\n\n//             <button>Give me the weather!</button>\n//         </form>\n//         </div>);\n//     }\n// };  УСТАРЕЛО, \"stateless expressions\" на замену:\n\nconst Form = props => ( // parenthesis instead of curly braces when explicitly return one element\n        <div>\n            <h1>Form</h1>\n        <form onSubmit={props.getWeather}>\n            <input type=\"text\" name=\"latitude\" placeholder=\"(city)latitude\"></input>\n            <input type=\"text\" name=\"longtitude\" placeholder=\"(country)longtitude\"></input>\n\n            <button>Give me the weather!</button>\n        </form>\n        </div>\n        );\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = props => (\n        <div className=\"weather__info\">\n            {props.cloudtotal && <p className=\"weather__key\">Index cloudy: <span className=\"weather__value\">{props.cloudtotal}</span></p>}\n            {props.feelslike && <p className=\"weather__key\">Feelslike: <span className=\"weather__value\">{props.feelslike} C</span></p>}\n\n            {props.humidity && <p className=\"weather__key\">Humidity:<span className=\"weather__value\">{props.humidity} %</span></p>}\n            {props.seaLevelPressure && <p className=\"weather__key\">Pressure: <span className=\"weather__value\">{props.seaLevelPressure} millibars</span></p>}\n            {props.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\">{props.temperature} C</span></p>}\n           {props.winddir_compass && <p className=\"weather__key\">Wind direction: <span className=\"weather__value\">{props.winddir_compass}</span></p>}\n            {props.windSpeed && <p className=\"weather__key\">Wind speed: <span className=\"weather__value\">{props.windSpeed} m/sec</span></p>}\n            {props.description && <p className=\"weather__key\">Conditions: <span className=\"weather__value\">{props.description}</span></p>}\n            <p className=\"weather__error\">{props.error}</p>\n        </div>\n            );\n\nexport default Weather;\n","import React from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = \"95b86822741aadf615e1da0ac5ded8b3\",\n    APP_ID = \"ab684c34\";\n// API Base URL: http://api.weatherunlocked.com/ or https://api.weatherunlocked.com/\n// api/{LocalWeatherType}/{Location}?app_id={APP_ID}&app_key={APP_KEY}\n// {LocalWeatherType} can be \"current\" or \"forecast\" Example:\n// http://api.weatherunlocked.com/api/current/51.50,-0.12?app_id={APP_ID}&app_key={APP_KEY}\n// Valid decimal geolocation coordinates with the following format: \"latitude,longitude\", with no more than 3 decimal places  OR postcodes:\n//  (@ = Letter, # = Number)\n// United Kingdom  'uk'  'uk.postcode'\n// United States 'us'  'us.#####'\n// Example: Current Weather and UK postcode\n// http://api.weatherunlocked.com/api/current/uk.G3 8ND?app_id=APP_ID&app_key=APP_KEY\n// Example: Forecast Weather and US zipcode\n// http://api.weatherunlocked.com/api/forecast/us.33109?app_id=APP_ID&app_key=APP_KEY\n//  and local language :\n// Example: Forecast Weather for NY with Italian descriptions\n// http://api.weatherunlocked.com/api/forecast/40.7,-74?lang=it&app_id=APP_ID&app_key=APP_KEY\n// Географические координаты Калининграда (в скобках — в градусах и десятичных минутах)\n// 54° 43' 12\" (54° 43' 27) северной широты\n// 20° 31' 18\" (20° 31' 44) восточной долготы\n\n\nclass App extends React.Component {\n    // depricated method in React >=v.16 !!!!! \"constructor ditched altogether\"\n    // constructor(props) {\n    //   super(props);\n    //   this.state = {\n\n    //   }\n    // }\n     state = {\ncloudtotal: undefined,    //index\nfeelslike: undefined,    //C\nhumidity: undefined,    //%\nseaLevelPressure:  undefined,   //millibars\ntemperature: undefined,    //C\nwinddir_compass: undefined,    //string\nwindSpeed: undefined,    //ms\ndescription: undefined ,   //string\nerror: undefined\n     }\n  getWeather = async (e) => {\n\n    e.preventDefault();\n    // const country = e.target.elements.country.value;\n    // const city = e.target.elements.city.value;\n    const latitude = e.target.elements.latitude.value;\n    const longtitude = e.target.elements.longtitude.value;\n\n    // здесь требуется конвертация страны\\ города в широту и долготу (Российских почт. индексов не предусмотрено)\n\n    const api_call = await fetch(`http://api.weatherunlocked.com/api/current/${latitude},${longtitude}?lang=it&app_id=${APP_ID}&app_key=${API_KEY}`);\n    const data = await api_call.json();\n    console.log(data);\n    if(latitude && longtitude) {\n      this.setState({\n      cloudtotal: data.cloudtotal_pct,    //index\n      feelslike: data.feelslike_c,    //C\n      humidity: data.humid_pct,    //%\n      seaLevelPressure:  data.slp_mb,   //millibars\n      temperature: data.temp_c,    //C\n      winddir_compass: data.winddir_compass,    //string\n      windSpeed: data.windspd_ms,    //ms\n      description: data.wx_desc ,   //string\n      error: \"\"\n    });\n    } else {\n      this.setState({\n      cloudtotal: undefined,    //index\n      feelslike: undefined,    //C\n      humidity: undefined,    //%\n      seaLevelPressure:  undefined,   //millibars\n      temperature: undefined,    //C\n      winddir_compass: undefined,    //string\n      windSpeed: undefined,    //ms\n      description: undefined ,   //string\n      error: \"Enter the coords, please!\"\n    });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n                <Titles />\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather}/>\n                <Weather cloudtotal={this.state.cloudtotal}    //index\n              feelslike = {this.state.feelslike}    //C\n              humidity = {this.state.humidity}    //%\n              seaLevelPressure =  {this.state.seaLevelPressure}   //millibars\n              temperature = {this.state.temperature}    //C\n              winddir_compass = {this.state.winddir_compass}    //string\n              windSpeed = {this.state.windSpeed}    //ms\n              description = {this.state.description }   //string\n              error = {this.state.error } />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>);\n  }\n};\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// registerServiceWorker();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}