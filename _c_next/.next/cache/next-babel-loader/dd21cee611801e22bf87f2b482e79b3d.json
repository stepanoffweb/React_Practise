{"ast":null,"code":"var _jsxFileName = \"E:\\\\MONEYweb\\\\JOB\\\\4_myActivity\\\\0_REPO\\\\3_React_Practise\\\\c_next\\\\pages\\\\post\\\\[template].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { MainLayout } from '../../layouts/MainLayout';\nimport { useState, useEffect } from 'react';\nexport default function Post({\n  post: serverPost\n}) {\n  const {\n    0: post,\n    1: setPost\n  } = useState(serverPost);\n  console.log('post: ', post);\n  const router = useRouter(); // console.log('router: ', router);\n\n  useEffect(() => {\n    if (!serverPost) {\n      async () => {\n        const response = await fetch(`http://localhost:4200/posts/${router.query.template}`);\n        const data = await response.json();\n        setPost(data);\n      };\n    }\n  }, []);\n\n  if (!post) {\n    return __jsx(MainLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 16\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, \"Loading...\"));\n  }\n\n  return __jsx(MainLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 8\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, post.title, \" \"), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, post.body), __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \"Go back to \", __jsx(Link, {\n    href: \"/posts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 28\n    }\n  }, \" POSTS\")));\n}\n\nPost.getInitialProps = async ctx => {\n  // console.log('ctx.req: ', ctx);\n  if (!ctx.req) return {\n    post: null\n  };\n  const response = await fetch(`http://localhost:4200/posts/${ctx.query.template}`);\n  const post = await response.json();\n  return {\n    post\n  };\n}; // <h1><Link href={'/'}>Post router.query.template = </Link>{router.query.template}</h1>\n// router: ServerRouter {\n//     route: '/post/[template]',\n//     pathname: '/post/[template]',\n//     query: {},\n//     asPath: '/post/[template]',\n//     basePath: '',\n//     events: undefined,\n//     isFallback: false\n// }\n// ответ клиенту(WebDevTools) router: {\n//     pathname: \"/post/[template]\",\n//     route: \"/post/[template]\",\n//     query: {\n//         …},\n//     asPath: \"/post/id\",\n//     components: {\n//         …},\n//     …\n// }\n// asPath: \"/post/id\" // !!! из адресной строки, где отрисована страница...Зачем возвращать мне набранный адрес?\n// back: ƒ()\n// basePath: \"\"\n// beforePopState: ƒ()\n// components: {\n//         /post/ [template]: {\n//             …},\n//         /_app: {…}}\n//         events: {\n//             on: ƒ,\n//             off: ƒ,\n//             emit: ƒ\n//         }\n//         isFallback: false\n//         pathname: \"/post/[template]\"\n//         prefetch: ƒ()\n//         push: ƒ()\n//         query: {\n//             template: \"id\"\n//         } // ключ - название файла !\n//         reload: ƒ()\n//         replace: ƒ()\n//         route: \"/post/[template]\"\n//         __proto__: Object","map":{"version":3,"sources":["E:/MONEYweb/JOB/4_myActivity/0_REPO/3_React_Practise/c_next/pages/post/[template].js"],"names":["useRouter","Link","MainLayout","useState","useEffect","Post","post","serverPost","setPost","console","log","router","response","fetch","query","template","data","json","title","body","getInitialProps","ctx","req"],"mappings":";;;AAAA,SAAQA,SAAR,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,IAAT,CAAc;AAACC,EAAAA,IAAI,EAAEC;AAAP,CAAd,EAAkC;AAC7C,QAAM;AAAA,OAACD,IAAD;AAAA,OAAOE;AAAP,MAAkBL,QAAQ,CAACI,UAAD,CAAhC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,IAAtB;AACA,QAAMK,MAAM,GAAGX,SAAS,EAAxB,CAH6C,CAI7C;;AAEAI,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACG,UAAL,EAAiB;AACb,kBAAY;AACR,cAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BF,MAAM,CAACG,KAAP,CAAaC,QAAS,EAAtD,CAA5B;AACA,cAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAT,QAAAA,OAAO,CAACQ,IAAD,CAAP;AACH,OAJD;AAKH;AACJ,GARQ,EAQN,EARM,CAAT;;AAWA,MAAI,CAACV,IAAL,EAAW;AACP,WAAO,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADG,CAAP;AAGH;;AACD,SACG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACY,KAAV,MADL,EAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFL,EAGK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIZ,IAAI,CAACa,IAAT,CAHL,EAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAe,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAf,CAJL,CADH;AAQH;;AAEDd,IAAI,CAACe,eAAL,GAAuB,MAAOC,GAAP,IAAe;AAClC;AACA,MAAI,CAACA,GAAG,CAACC,GAAT,EAAc,OAAO;AAAChB,IAAAA,IAAI,EAAE;AAAP,GAAP;AAEd,QAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8BQ,GAAG,CAACP,KAAJ,CAAUC,QAAS,EAAnD,CAA5B;AACA,QAAMT,IAAI,GAAG,MAAMM,QAAQ,CAACK,IAAT,EAAnB;AACA,SAAO;AACHX,IAAAA;AADG,GAAP;AAGH,CATD,C,CAYI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {useRouter} from 'next/router'\r\nimport Link from 'next/link'\r\n\r\nimport {MainLayout} from '../../layouts/MainLayout'\r\nimport { useState, useEffect } from 'react'\r\n\r\nexport default function Post({post: serverPost}) {\r\n    const [post, setPost] = useState(serverPost)\r\n    console.log('post: ', post);\r\n    const router = useRouter()\r\n    // console.log('router: ', router);\r\n\r\n    useEffect(() => {\r\n        if (!serverPost) {\r\n            async () => {\r\n                const response = await fetch(`http://localhost:4200/posts/${router.query.template}`)\r\n                const data = await response.json()\r\n                setPost(data)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (!post) {\r\n        return <MainLayout>\r\n            <h1>Loading...</h1>\r\n        </MainLayout>\r\n    }\r\n    return (\r\n       <MainLayout>\r\n            <h1>{post.title} </h1>\r\n            <hr/>\r\n            <p>{post.body}</p>\r\n            <h5>Go back to <Link href=\"/posts\"> POSTS</Link></h5>\r\n       </MainLayout>\r\n    )\r\n}\r\n\r\nPost.getInitialProps = async (ctx) => {\r\n    // console.log('ctx.req: ', ctx);\r\n    if (!ctx.req) return {post: null}\r\n\r\n    const response = await fetch(`http://localhost:4200/posts/${ctx.query.template}`)\r\n    const post = await response.json()\r\n    return {\r\n        post\r\n    }\r\n}\r\n\r\n\r\n    // <h1><Link href={'/'}>Post router.query.template = </Link>{router.query.template}</h1>\r\n// router: ServerRouter {\r\n//     route: '/post/[template]',\r\n//     pathname: '/post/[template]',\r\n//     query: {},\r\n//     asPath: '/post/[template]',\r\n//     basePath: '',\r\n//     events: undefined,\r\n//     isFallback: false\r\n// }\r\n// ответ клиенту(WebDevTools) router: {\r\n//     pathname: \"/post/[template]\",\r\n//     route: \"/post/[template]\",\r\n//     query: {\r\n//         …},\r\n//     asPath: \"/post/id\",\r\n//     components: {\r\n//         …},\r\n//     …\r\n// }\r\n// asPath: \"/post/id\" // !!! из адресной строки, где отрисована страница...Зачем возвращать мне набранный адрес?\r\n// back: ƒ()\r\n// basePath: \"\"\r\n// beforePopState: ƒ()\r\n// components: {\r\n//         /post/ [template]: {\r\n//             …},\r\n//         /_app: {…}}\r\n//         events: {\r\n//             on: ƒ,\r\n//             off: ƒ,\r\n//             emit: ƒ\r\n//         }\r\n//         isFallback: false\r\n//         pathname: \"/post/[template]\"\r\n//         prefetch: ƒ()\r\n//         push: ƒ()\r\n//         query: {\r\n//             template: \"id\"\r\n//         } // ключ - название файла !\r\n//         reload: ƒ()\r\n//         replace: ƒ()\r\n//         route: \"/post/[template]\"\r\n//         __proto__: Object\r\n"]},"metadata":{},"sourceType":"module"}